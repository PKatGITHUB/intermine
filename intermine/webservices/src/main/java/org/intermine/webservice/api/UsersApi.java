/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.intermine.webservice.api;

import org.intermine.webservice.model.DeregistrationToken;
import org.intermine.webservice.model.Preferences;
import org.intermine.webservice.model.Token;
import org.intermine.webservice.model.Users;
import io.swagger.annotations.*;
import org.intermine.webservice.model.WhoAmI;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-19T19:35:11.443+05:30[Asia/Kolkata]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Create a new user in the user-profile.", nickname = "users", notes = "This service allows users of the web service to create a new user account. A user account is required for a number of operations, such as saving lists. This service allows users of the webservice to register an account, and start using these features that require authentication. The username and password provided will be able to be used for future requests, as will an API key provided with the response, which is valid for 24 hours. This is equivalent to the registration mechanism in the web-application interface. Requests to this service are rate limited by IP Address.", response = Users.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Users.class) })
    @RequestMapping(value = "/users",
        method = RequestMethod.POST)
    ResponseEntity<Users> users(@NotNull @ApiParam(value = "The user name of the new user. It should be an email address if possible. There must not be any user with the same username.", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "A password to associate with the account.", required = true) @Valid @RequestParam(value = "password", required = true) String password,@ApiParam(value = "Whether or not to subscribe to the mine's mailing list, if it has one. The username must be an email address if true.") @Valid @RequestParam(value = "subscribe-to-list", required = false) Boolean subscribeToList);

    @ApiOperation(value = "Get details about the authenticated user.", nickname = "whoAmI", notes = "Retrieve information about the currently authenticated user. This can be used to display the user's name.", response = WhoAmI.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = WhoAmI.class) })
    @RequestMapping(value = "/user/whoami",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<WhoAmI> whoAmI();

    @ApiOperation(value = "Get a new API key.", nickname = "token", notes = "This service allows a user to retrieve an API token which is valid for up to 24 hours of unlimited use. The primary use case is to get an API key where the user has only username/password credentials, since the use of API keys is more secure.", response = Token.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Token.class) })
    @RequestMapping(value = "/user/token",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Token> token();

    @ApiOperation(value = "Delete a deregistration token.", nickname = "deregistrationTokenDelete", notes = "This service deletes a deregistration token that a user has access to, thus cancelling the request to de-register the user.", response = DeregistrationToken.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = DeregistrationToken.class) })
    @RequestMapping(value = "/user/deregistration/{uid}",
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<DeregistrationToken> deregistrationTokenDelete(@ApiParam(value = "The identifier of the token.",required=true) @PathVariable("uid") String uid);


    @ApiOperation(value = "Get information about a deregistration token.", nickname = "deregistrationTokenGet", notes = "This service returns a representation of a deregistration token that a user has access to.", response = DeregistrationToken.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = DeregistrationToken.class) })
    @RequestMapping(value = "/user/deregistration/{uid}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<DeregistrationToken> deregistrationTokenGet(@ApiParam(value = "The identifier of the token.",required=true) @PathVariable("uid") String uid);


    @ApiOperation(value = "Create a deregistration token.", nickname = "deregistrationTokenPost", notes = "This service creates a deregistration token, thus starting the process of de-registerin a user.", response = DeregistrationToken.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = DeregistrationToken.class) })
    @RequestMapping(value = "/user/deregistration",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<DeregistrationToken> deregistrationTokenPost();

    @ApiOperation(value = "Delete the Current User.", nickname = "userDelete", notes = "This service deletes the current User and all their data. To ensure that you really mean to deregister a user programmatically, this service requires a deregistration token to be obtained before sending the delete request. As output it returns all of the user data it had before it was deleted.", response = Users.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Users.class) })
    @RequestMapping(value = "/user",
            produces = { "application/xml" },
            method = RequestMethod.DELETE)
    ResponseEntity<Object> userDelete(@NotNull @ApiParam(value = "A token to ensure this is not a mistake.", required = true) @Valid @RequestParam(value = "deregistrationToken", required = true) String deregistrationToken);


    @ApiOperation(value = "Get information about the Current User.", nickname = "userGet", notes = "This service provides information about the current user, including their user name and preferences.", response = Users.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Users.class) })
    @RequestMapping(value = "/user",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<WhoAmI> userGet();

    @ApiOperation(value = "Remove one or all preferences.", nickname = "userPreferencesDelete", notes = "Delete either a single preference from a user's set of stored preferences, or deletes all stored preference values.", response = Preferences.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Preferences.class) })
    @RequestMapping(value = "/user/preferences",
            produces = { "application/json" },
            method = RequestMethod.DELETE)
    ResponseEntity<Preferences> userPreferencesDelete(@ApiParam(value = "The preference to delete. If not provided, ALL will be cleared") @Valid @RequestParam(value = "key", required = false) String key);


    @ApiOperation(value = "Get a user's preferences.", nickname = "userPreferencesGet", notes = "Get a complete listing of a user's preferences. This is presented as a mapping from string key to string value.", response = Preferences.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Preferences.class) })
    @RequestMapping(value = "/user/preferences",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Preferences> userPreferencesGet();


    @ApiOperation(value = "Set the value of one or more preferences.", nickname = "userPreferencesPost", notes = "This service allows a user to store or change a key value pair associated with their account. The keys may have a particular meaning. All values will be stored and retrieved as strings.", response = Preferences.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Preferences.class) })
    @RequestMapping(value = "/user/preferences",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Preferences> userPreferencesPost(@ApiParam(value = "The preference to set.") @Valid @RequestParam(value = "preferences", required = false) Map<String, String> preferences);


    @ApiOperation(value = "Set the value of one or more preferences.", nickname = "userPreferencesPut", notes = "This service allows a user to store or change a key value pair associated with their account. The keys may have a particular meaning. All values will be stored and retrieved as strings.", response = Preferences.class, authorizations = {
            @Authorization(value = "ApiKeyAuthToken"),
            @Authorization(value = "BasicAuth"),
            @Authorization(value = "JWTBearerAuth")    }, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Preferences.class) })
    @RequestMapping(value = "/user/preferences",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Preferences> userPreferencesPut(@ApiParam(value = "The preference to set.") @Valid @RequestParam(value = "preferences", required = false) Map<String, String> preferences);


}
